@page "/Charts/SmartAxisLabels"
@using Syncfusion.EJ2.Blazor.Charts
@using Syncfusion.EJ2.Blazor.Buttons

@inherits SampleBaseComponent;
<div>
    <div class="col-md-8 control-section">
        <EjsChart Title="Internet Users in Millons">
            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis EdgeLabelPlacement="@labelPlacement" LabelPosition="@labelPosition" MaximumLabelWidth="@labelWidth" EnableTrim="@enableTrim" ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="@intersectAction">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisLabelStyle Size="0px"></ChartAxisLabelStyle>
            </ChartPrimaryYAxis>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@chartData" XName="x" YName="y" Name="Users" Opacity="1" Width=2 Type="ChartSeriesType.Column">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.EJ2.Blazor.Charts.LabelPosition.Top">
                            <ChartDataLabelFont Color="#ffffff" FontWeight="600"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartLegendSettings Visible="false"></ChartLegendSettings>
        </EjsChart>
    </div>
    <div class="col-md-4 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tr style="height:50px"><th>Properties</th></tr>
            <tr style="height: 50px">
                <td style="width: 40%">
                    <div>Intersect Action:</div>
                </td>
                <td style="width: 60%;">
                    <div>
                        <select @onchange="changeIntersectAction" name="selectIndex" id="selmode" style="width:98%;margin-left: -5px;">
                            <option value="Hide">Hide</option>
                            <option value="Trim">Trim</option>
                            <option value="Wrap">Wrap</option>
                            <option value="MultipleRows">MultipleRows</option>
                            <option value="Rotate45">Rotate45</option>
                            <option value="Rotate90">Rotate90</option>
                            <option value="None">None</option>
                        </select>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 60%">
                    <div>Edge Label Placement:</div>
                </td>
                <td style="width: 40%;">
                    <div>
                        <select @onchange="changeLabelPlacement" name="selectIndex" id="edgemode" style="margin-left: -5px">
                            <option value="None">None</option>
                            <option value="Hide">Hide</option>
                            <option value="Shift">Shift</option>
                        </select>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 60%">
                    <div>Label Position:</div>
                </td>
                <td style="width: 40%;">
                    <div>
                        <select @onchange="changeLabelPosition" name="selectIndex" id="labelmode" style="margin-left: -5px">
                            <option value="Outside">Outside</option>
                            <option value="Inside">Inside</option>
                        </select>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 60%">
                    <div>Enable Trim:</div>
                </td>
                <td style="width: 40%;">
                    <div>
                        <EjsCheckBox Checked="@isTrim" ValueChange="@changeSelection"></EjsCheckBox>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 60%">
                    <div>Maximum Label Width:</div>
                </td>
                <td style="width: 40%;">
                    <div style='margin-top: 0px;'>
						<input type="number" @onchange="changeValue" min="1" max="120" step=1 value="@width"/>
                    </div>
                </td>
            </tr>
        </table>
    </div>
</div>
@code{
    private Boolean enableTrim = false, isTrim = false;
	public int labelWidth = 34, width = 34;
    LabelIntersectAction intersectAction = LabelIntersectAction.Hide;
	EdgeLabelPlacement labelPlacement = EdgeLabelPlacement.None;
	AxisPosition labelPosition = AxisPosition.Outside;
    private void changeSelection(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        enableTrim = isTrim = args.Checked;
    }
    public void changeValue(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
		labelWidth = width = Convert.ToInt32(args.Value);
    }
    public void changeIntersectAction(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        this.intersectAction = (LabelIntersectAction)Enum.Parse(typeof(LabelIntersectAction), args.Value.ToString(), true);
    }
     public void changeLabelPlacement(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        this.labelPlacement = (EdgeLabelPlacement)Enum.Parse(typeof(EdgeLabelPlacement), args.Value.ToString(), true);
    }
     public void changeLabelPosition(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        this.labelPosition = (AxisPosition)Enum.Parse(typeof(AxisPosition), args.Value.ToString(), true);
    }
    public class CategoryData
    {
        public string x { get; set; }
        public double y { get; set; }
    }
    public List<CategoryData> chartData = new List<CategoryData>
{
        new CategoryData { x = "South Korea", y = 39 },
        new CategoryData { x = "India", y = 61 },
        new CategoryData { x = "Pakistan", y = 20 },
        new CategoryData { x = "Germany", y = 65 },
        new CategoryData { x = "Australia", y = 16 },
        new CategoryData { x = "Italy", y = 29 },
        new CategoryData { x = "France", y = 45 },
        new CategoryData { x = "United Arab Emirates", y = 10 },
        new CategoryData { x = "Russia", y = 41 },
        new CategoryData { x = "Mexico", y = 31 },
        new CategoryData { x = "Brazil", y = 76 },
        new CategoryData { x = "China", y = 51 },
     };
}
