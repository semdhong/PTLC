@page "/Charts/RangeArea"
@using Syncfusion.EJ2.Blazor.Charts

@inherits SampleBaseComponent;

<div class="control-section">
    <EjsChart Title="Temperature Variation">
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}˚C">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartZoomSettings EnableSelectionZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@SeriesData" Name="India" XName="X" High="High" Low="Low" Opacity="0.4" Type="ChartSeriesType.RangeArea">
            </ChartSeries>
        </ChartSeriesCollection>
    </EjsChart>
</div>

@code{

    Random random = new Random();
    DateTime date = new DateTime(2015, 1, 1);
    public class ChartData
    {
        public DateTime X { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
    }
    List<ChartData> SeriesData;
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            SeriesData = this.GetData();
        });
    }
    
    List <ChartData> GetData()
    {
        List<ChartData> data = new List<ChartData>();
        double value = 35;
        for (var i = 0; i < 359; i++)
        {
            if (random.NextDouble() > .5)
            {
                value += random.NextDouble();
            }
            else
            {
                value -= random.NextDouble();
            }
            data.Add(new ChartData() { X = date.AddDays(i), High = value, Low = (value - 10) });
        }
        return data;
    }
}
