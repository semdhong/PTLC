@page "/Sparkline/Customization"

@using Syncfusion.EJ2.Blazor.Charts
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.Inputs
@using Syncfusion.EJ2.Blazor.Buttons

@inherits SampleBaseComponent;



<div class="col-lg-8 control-section sb-property-border">
    <div class="control-section">
        <div id="spark-container" class="row">
            <div class="cols-sample-area" align="center">
                <p>
                    <font size=4> Worldwide car sales by brand - 2017</font>
                </p>
                <table style="width:150%;">
                    <tr>
                        <td align="center">Sales Percentage</td>
                        <td>
                            <div id="percentage1" style="height: 200px;width: 200px;margin-left: 10px">
                                <EjsSparkline ID="percentage1" @ref="@perSparklineRef" XName="xval" YName="yval" EnableRtl="@perRtl" DataSource=@percentageData Type="@Syncfusion.EJ2.Blazor.Charts.SparklineType.Column" valueType="@Syncfusion.EJ2.Blazor.Charts.SparklineValueType.Category" Width="200px" Height="200px" LineWidth="2">
                                    <SparklineAxisSettings MinY="@perAxisMiny" MaxY="perAxisMaxy" Value="@perAxisValue">
                                        <SparklineAxisLineSettings Visible="@perAxisLineVisible" Color="@perAxislineColor" Width="@perAxislineWidth">
                                        </SparklineAxisLineSettings>
                                    </SparklineAxisSettings>
                                    <SparklineMarkerSettings Fill="red" Size="5" Visible="@perMarkerVisible"></SparklineMarkerSettings>
                                    <SparklineDataLabelSettings Visible="@perDatalabelVisible"></SparklineDataLabelSettings>
                                    <SparklineTooltipSettings Visible="@perTooltipVisible" Format="${xval}: ${yval}">
                                        <SparklineTrackLineSettings Visible="@perTrackLineVisible" Color="red" Width="1"></SparklineTrackLineSettings>
                                    </SparklineTooltipSettings>
                                </EjsSparkline>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td align="center">Sales Count</td>
                        <td>
                            <div id="Sales1" style="height: 200px; width: 200px; margin-left: 10px">
                                <EjsSparkline ID="Sales1" @ref="@salSparklineRef" XName="xval" YName="yval" DataSource=@salData EnableRtl="@perRtl" Type="@Syncfusion.EJ2.Blazor.Charts.SparklineType.Column" ValueType="@Syncfusion.EJ2.Blazor.Charts.SparklineValueType.Category" Width="200px" Height="200px" LineWidth="2">
                                    <SparklineAxisSettings MinY="@salAxisMiny" MaxY="salAxisMaxy" Value="@salAxisValue">
                                        <SparklineAxisLineSettings Visible="@perAxisLineVisible" Color="@perAxislineColor" Width="@perAxislineWidth">
                                        </SparklineAxisLineSettings>
                                    </SparklineAxisSettings>
                                    <SparklineMarkerSettings Visible="@perMarkerVisible" Fill="red" Size="5"></SparklineMarkerSettings>
                                    <SparklineDataLabelSettings Visible="@perDatalabelVisible"></SparklineDataLabelSettings>
                                    <SparklineTooltipSettings Visible="@perTooltipVisible" Format="${xval}: ${yval}">
                                        <SparklineTrackLineSettings Visible="@perTrackLineVisible" Color="red" Width="1"></SparklineTrackLineSettings>
                                    </SparklineTooltipSettings>
                                </EjsSparkline>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    <div style="float: right; margin-right: 10px;">
        Source:
        <a href=" http://carsalesbase.com/global-car-sales-2017" target="_blank">carsalesbase.com</a>
    </div>
</div>
<div class="col-lg-4 property-section">
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table id="property" style="width:100%" title="Properties">
                <tbody>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Special Points
                        </td>
                        <td style="width: 50%">
                            <table>
                                <tr>
                                    <td style="padding: 5px;">All</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox id="all" ValueChange="@allCheckbox" Checked="@allCheckboxChange"></EjsCheckBox>

                                    </td> &nbsp; &nbsp;
                                    <td style="padding: 5px;">Negative</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox id="negative" ValueChange="@negativeCheckbox" Checked="@negativeCheckboxChange" Disabled="@negativeCheckboxDisable"></EjsCheckBox>

                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px;">First</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox id="first" ValueChange="@firstCheckbox" Checked="firstCheckboxChange" Disabled="@firstCheckboxDisable"></EjsCheckBox>

                                    </td>&nbsp; &nbsp;
                                    <td style="padding: 5px;">Last</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox id="last" ValueChange="@lastCheckbox" Checked="@lastCheckboxChange" Disabled="@lastCheckboxDisable"></EjsCheckBox>

                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px;">High</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox id="high" ValueChange="@highCheckbox" Checked="@highCheckboxChange" Disabled="@highCheckboxDisable"></EjsCheckBox>

                                    </td>&nbsp; &nbsp;
                                    <td style="padding: 5px;">Low</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <EjsCheckBox id="low" ValueChange="@lowCheckbox" Checked="@lowCheckboxChange" Disabled="@lowCheckboxDisable"></EjsCheckBox>

                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Marker
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="marker" Checked="@markerChanged" ValueChange="@marker"></EjsCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px ; ">
                        <td style="width: 50%">
                            Data Label
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="datalabel" Checked="@datalabelChanged" ValueChange="@datalabel"></EjsCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Enable RTL
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="rtl" Checked="@rtlChanged" ValueChange="@RTL"></EjsCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Tooltip
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="tooltip" Checked="@tooltipChanged" ValueChange="@ToolTip"></EjsCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Track Line
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="trackline" Checked="@tracklineChanged" ValueChange="@TrackLine"></EjsCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Axis Line
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <EjsCheckBox id="axis1" Checked="@axislineChanged" ValueChange="@AxisLine"></EjsCheckBox>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
<style>
    .property-text {
        font-family: "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif" !important;
        font-size: 13px !important;
        font-weight: 400 !important;
    }

    .control-section {
        min-height: 450px;
    }

    #range > * {
        padding: 0px !important;
    }

    label {
        height: 32px !important;
    }
</style>

@code {
    EjsSparkline<SparkData> perSparklineRef;
    EjsSparkline<SparkData> salSparklineRef;
    private Double perAxisMiny = -10;
    private Double perAxisMaxy = 10;
    private Double perAxisValue = 0;
    private String perAxislineColor = "red";
    private Double perAxislineWidth = 2;
    private Double salAxisMiny = 0;
    private Double salAxisMaxy = 0;
    private Double salAxisValue = 0;
    private Boolean perAxisLineVisible = false;
    private Boolean perTooltipVisible = false;
    private Boolean perTrackLineVisible = false;
    private List<VisibleType> perMarkerVisible { get; set; } = new List<VisibleType>();
    private List<VisibleType> perDatalabelVisible { get; set; } = new List<VisibleType>();
    private Boolean perRtl = false;
    private Boolean negativeCheckboxDisable = true;
    private Boolean lowCheckboxDisable = true;
    private Boolean highCheckboxDisable = true;
    private Boolean firstCheckboxDisable = true;
    private Boolean lastCheckboxDisable = true;
    private Boolean allCheckboxChange = true;
    private Boolean negativeCheckboxChange;
    private Boolean highCheckboxChange;
    private Boolean lowCheckboxChange;
    private Boolean firstCheckboxChange;
    private Boolean lastCheckboxChange;
    private Boolean markerChanged = false;
    private Boolean datalabelChanged;
    private Boolean rtlChanged = false;
    private Boolean tooltipChanged;
    private Boolean tracklineChanged;
    private Boolean axislineChanged;
    public class SparkData
    {
        public Double x;
        public string xval;
        public double yval;
    }
    private List<SparkData> percentageData = new List<SparkData>
{
        new SparkData { x = 0, xval = "AUDI", yval = 1  },
        new SparkData { x = 1, xval = "BMW", yval = 5 },
        new SparkData { x = 2, xval = "BUICK", yval = -1 },
        new SparkData { x = 3, xval = "CETROEN", yval = -6 },
        new SparkData { x = 4, xval = "CHEVROLET", yval = 0 },
        new SparkData { x = 5, xval = "FIAT", yval = 1 },
        new SparkData { x = 6, xval = "FORD", yval = -2 },
        new SparkData { x = 7, xval = "HONDA", yval = 7 },
        new SparkData { x = 8, xval = "HYUNDAI", yval = -9 },
        new SparkData { x = 9, xval = "JEEP", yval = 0 },
        new SparkData { x = 10, xval = "KIA", yval = -10 },
        new SparkData { x = 11, xval = "MAZDA", yval = 3 },
        new SparkData { x = 12, xval = "MERCEDES", yval = 13 },
        new SparkData { x = 13, xval = "NISSAN", yval = 5 },
        new SparkData { x = 14, xval = "OPEL/VHALL", yval = -6 },
        new SparkData { x = 15, xval = "PEUGEOT", yval = 0 },
        new SparkData { x = 16, xval = "RENAULT", yval = 7 },
        new SparkData { x = 17, xval = "SKODA", yval = 5 },
        new SparkData { x = 18, xval = "SUBARU", yval = 5 },
        new SparkData { x = 19, xval = "SUZUKI", yval = 11 },
        new SparkData { x = 20, xval = "TOYOTA", yval = 5 },
        new SparkData { x = 21, xval = "VOLKSWAGEN", yval = 3 },
    };
    private List<SparkData> salData = new List<SparkData>
{
        new SparkData { x = 0, xval = "AUDI", yval = 1847613 },
        new SparkData { x = 1, xval = "BMW", yval = 2030331 },
        new SparkData { x = 2, xval = "BUICK", yval = 1465823 },
        new SparkData { x = 3, xval = "CETROEN", yval = 999888 },
        new SparkData { x = 4, xval = "CHEVROLET", yval = 3857388 },
        new SparkData { x = 5, xval = "FIAT", yval = 1503806 },
        new SparkData { x = 6, xval = "FORD", yval = 5953122 },
        new SparkData { x = 7, xval = "HONDA", yval = 4967689 },
        new SparkData { x = 8, xval = "HYUNDAI", yval = 3951176 },
        new SparkData { x = 9, xval = "JEEP", yval = 1390130 },
        new SparkData { x = 10, xval = "KIA", yval = 2511293 },
        new SparkData { x = 11, xval = "MAZDA", yval = 1495557 },
        new SparkData { x = 12, xval = "MERCEDES", yval = 2834181 },
        new SparkData { x = 13, xval = "NISSAN", yval = 4834694 },
        new SparkData { x = 14, xval = "OPEL/VHALL", yval = 996559 },
        new SparkData { x = 15, xval = "PEUGEOT", yval = 1590300 },
        new SparkData { x = 16, xval = "RENAULT", yval = 2275227 },
        new SparkData { x = 17, xval = "SKODA", yval = 1180672 },
        new SparkData { x = 18, xval = "SUBARU", yval = 1050390 },
        new SparkData { x = 19, xval = "SUZUKI", yval = 2891415 },
        new SparkData { x = 20, xval = "TOYOTA", yval = 7843423 },
        new SparkData { x = 21, xval = "VOLKSWAGEN", yval = 6639250 },
    };
    public class SparkList
    {
        public string Sparks { get; set; }
        public string Name { get; set; }
    }

    private List<SparkList> sparklist = new List<SparkList>
{
        new SparkList{Sparks = "SalesPercentage" , Name = "Sales Percentage"},
        new SparkList{Sparks = "SalesCount" , Name = "Sales Count"},
    };
    private void allCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        allCheckboxChange = args.Checked;
        negativeCheckboxDisable = allCheckboxChange;
        highCheckboxDisable = allCheckboxChange;
        lowCheckboxDisable = allCheckboxChange;
        firstCheckboxDisable = allCheckboxChange;
        lastCheckboxDisable = allCheckboxChange;
        perMarkerVisible = (allCheckboxChange && markerChanged) ? new List<VisibleType> { VisibleType.All } : (markerChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        perDatalabelVisible = (allCheckboxChange && datalabelChanged) ? new List<VisibleType> { VisibleType.All } : (datalabelChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }
    private void datalabel(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args1)
    {
        datalabelChanged = args1.Checked;
        perDatalabelVisible = (datalabelChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }
    private void negativeCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args2)
    {
        negativeCheckboxChange = args2.Checked;
        perMarkerVisible = (negativeCheckboxChange && markerChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        perDatalabelVisible = (negativeCheckboxChange && datalabelChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }

    private void lowCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args2)
    {
        lowCheckboxChange = args2.Checked;
        perMarkerVisible = (lowCheckboxChange && markerChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        perDatalabelVisible = (lowCheckboxChange && datalabelChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }
    private void highCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args2)
    {
        highCheckboxChange = args2.Checked;
        perMarkerVisible = (highCheckboxChange && markerChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        perDatalabelVisible = (highCheckboxChange && datalabelChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }

    private void firstCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args2)
    {
        firstCheckboxChange = args2.Checked;
        perMarkerVisible = (firstCheckboxChange && markerChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        perDatalabelVisible = (firstCheckboxChange && datalabelChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }

    private void lastCheckbox(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args2)
    {
        lastCheckboxChange = args2.Checked;
        perMarkerVisible = (lastCheckboxChange && markerChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        perDatalabelVisible = (lastCheckboxChange && datalabelChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }
    private void marker(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args3)
    {
        markerChanged = args3.Checked;
        perMarkerVisible = (markerChanged) ? getvisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }
    private void RTL(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args4)
    {
        rtlChanged = args4.Checked;
        perRtl = args4.Checked;
        perSparklineRef.Refresh();
        salSparklineRef.Refresh();
        this.StateHasChanged();
    }
    private void ToolTip(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args5)
    {
        tooltipChanged = args5.Checked;
        perTooltipVisible = args5.Checked;
        this.StateHasChanged();
    }
    private void TrackLine(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args6)
    {
        tracklineChanged = args6.Checked;
        perTrackLineVisible = args6.Checked;
        this.StateHasChanged();
    }
    private void AxisLine(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args7)
    {
        axislineChanged = args7.Checked;
        perAxisLineVisible = axislineChanged;
        perAxislineWidth = 2;
        perAxislineColor = "red";
        this.StateHasChanged();
    }
    List<VisibleType> getvisible()
    {
        List<VisibleType> typ = new List<VisibleType> { };
        if (allCheckboxChange) { typ.Add(VisibleType.All); return typ; }
        if (negativeCheckboxChange) { typ.Add(VisibleType.Negative); }
        if (highCheckboxChange) { typ.Add(VisibleType.High); }
        if (lowCheckboxChange) { typ.Add(VisibleType.Low); }
        if (firstCheckboxChange) { typ.Add(VisibleType.Start); }
        if (lastCheckboxChange) { typ.Add(VisibleType.End); }
        return typ;
    }

}