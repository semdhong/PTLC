@page "/CircularGauge/Speedometer"

@using Syncfusion.EJ2.Blazor.CircularGauge
@using Syncfusion.EJ2.Blazor.Buttons

@inherits SampleBaseComponent;

<div class="col-lg-9 control-section sb-property-border">
    <EjsCircularGauge Title="Speedometer" CenterY="75%" @ref="@Gauge">
        <CircularGaugeTitleStyle Size="18px"></CircularGaugeTitleStyle>
        <CircularGaugeAxes>
            <CircularGaugeAxis EndAngle="90" StartAngle="270" Radius="120%" Minimum="0" Maximum="120" RangeGap="@rangeGap">
                <CircularGaugeAxisLineStyle Width="0" Color="#9E9E9E">
                </CircularGaugeAxisLineStyle>
                <CircularGaugeAxisMajorTicks Width="0">
                </CircularGaugeAxisMajorTicks>
                <CircularGaugeAxisMinorTicks Width="0">
                </CircularGaugeAxisMinorTicks>
                <CircularGaugeAxisLabelStyle Position="Position.Outside" AutoAngle="true">
                    <CircularGaugeAxisLabelFont Size="13px" FontFamily="Roboto"></CircularGaugeAxisLabelFont>
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeRanges>
                    <CircularGaugeRange Start="@firstRangeStart" End="@firstRangeEnd" StartWidth="@firstRangeStartWidth" EndWidth="@firstRangeEndWidth" Radius="102%" Color="@firstRangeColor">
                    </CircularGaugeRange>
                    <CircularGaugeRange Start="@secondRangeStart" End="@secondRangeEnd" StartWidth="@secondRangeStartWidth" EndWidth="@secondRangeEndWidth" Radius="102%" Color="@secondRangeColor">
                    </CircularGaugeRange>
                    <CircularGaugeRange Start="@thirdRangeStart" End="@thirdRangeEnd" StartWidth="@thirdRangeStartWidth" EndWidth="@thirdRangeEndWidth" Radius="102%" Color="@thirdRangeColor">
                    </CircularGaugeRange>
                    <CircularGaugeRange Start="@fourthRangeStart" End="@fourthRangeEnd" StartWidth="@fourthRangeStartWidth" EndWidth="@fourthRangeEndWidth" Radius="102%" Color="@fourthRangeColor">
                    </CircularGaugeRange>
                    <CircularGaugeRange Start="@fifthRangeStart" End="@fifthRangeEnd" StartWidth="@fifthRangeStartWidth" EndWidth="@fifthRangeEndWidth" Radius="102%" Color="@fifthRangeColor">
                    </CircularGaugeRange>
                    <CircularGaugeRange Start="@sixRangeStart" End="@sixRangeEnd" StartWidth="@sixRangeStartWidth" EndWidth="@sixRangeEndWidth" Radius="102%" Color="@sixRangeColor">
                    </CircularGaugeRange>
                </CircularGaugeRanges>
                <CircularGaugePointers>
                    <CircularGaugePointer Value="@pointerValue" Radius="80%" Color="#757575" PointerWidth="7">
                        <CircularGaugePointerAnimation Enable="false" Duration="1000">
                        </CircularGaugePointerAnimation>
                        <CircularGaugeCap Radius="8" Color="#757575">
                            <CircularGaugeCapBorder Width="0">
                            </CircularGaugeCapBorder>
                        </CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="15%" Color="#757575">
                        </CircularGaugeNeedleTail>
                    </CircularGaugePointer>
                </CircularGaugePointers>
                <CircularGaugeAnnotations>
                    <CircularGaugeAnnotation Angle="0" Radius='30%' ZIndex='1' Content="40 km/h">
                        <CircularGaugeAnnotationTextStyle Size="20px" FontFamily="Roboto"></CircularGaugeAnnotationTextStyle>
                    </CircularGaugeAnnotation>
                </CircularGaugeAnnotations>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </EjsCircularGauge>
</div>
<div class="col-lg-3 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%" class="property-panel-table">
                <tbody>
                    <tr>
                        <td style="width: 40%">
                            <div> Combine ranges</div>
                        </td>
                        <td style="width: 40%">
                            <div>
                                <EjsCheckBox ValueChange="@combineRangeChange" Checked="@combineRangeChecked"></EjsCheckBox>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 40%">
                            <div> Gap between ranges</div>
                        </td>
                        <td style="width: 40%">
                            <div>
                                <EjsCheckBox Disabled="@gapDisable" ValueChange="@rangeGapChange" Checked="@rangeGapChecked"></EjsCheckBox>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
<svg style="height:0px;width:0px">
    <defs>
        <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:#82b944;stop-opacity:1" />
            <stop offset="50%" style="stop-color:rgb(255,255,0);stop-opacity:1" />
            <stop offset="100%" style="stop-color:red;stop-opacity:1" />
        </linearGradient>
    </defs>
</svg>
<style>
    .property-panel-table div {
        padding-left: 10px;
        padding-top: 10px;
    }
</style>

@code {
    EjsCircularGauge Gauge;
    private Double rangeGap = 0;
    private Double pointerValue = 40;
    private Double firstRangeStart = 0;
    private Double firstRangeEnd = 20;
    private String firstRangeStartWidth = "5";
    private String firstRangeEndWidth = "10";
    private String firstRangeColor = "#82b944";
    private Double secondRangeStart = 20;
    private Double secondRangeEnd = 40;
    private String secondRangeStartWidth = "10";
    private String secondRangeEndWidth = "15";
    private String secondRangeColor = "#a1cb43";
    private Double thirdRangeStart = 40;
    private Double thirdRangeEnd = 60;
    private String thirdRangeStartWidth = "15";
    private String thirdRangeEndWidth = "20";
    private String thirdRangeColor = "#ddec12";
    private Double fourthRangeStart = 60;
    private Double fourthRangeEnd = 80;
    private String fourthRangeStartWidth = "20";
    private String fourthRangeEndWidth = "25";
    private String fourthRangeColor = "#ffbc00";
    private Double fifthRangeStart = 80;
    private Double fifthRangeEnd = 100;
    private String fifthRangeStartWidth = "25";
    private String fifthRangeEndWidth = "30";
    private String fifthRangeColor = "#ff6000";
    private Double sixRangeStart = 100;
    private Double sixRangeEnd = 120;
    private String sixRangeStartWidth = "30";
    private String sixRangeEndWidth = "35";
    private String sixRangeColor = "red";
    private String pointerValueText = "40 km/h";
    private Boolean combineRangeChecked;
    private Boolean rangeGapChecked;
    private Boolean gapDisable = false;
    System.Timers.Timer syncTimer1 = null;

    protected override void OnInitialized()
    {
        syncTimer1 = new System.Timers.Timer(1000);
        syncTimer1.Elapsed += this.pointerValueUpdate;
        syncTimer1.AutoReset = true;
        syncTimer1.Enabled = true;
    }
    Random Random = new Random();
    void pointerValueUpdate(Object source, System.Timers.ElapsedEventArgs e)
    {
        var Number = Random.NextDouble();
        var value = pointerValue + ((Number * (10 - (-10))) - 10);
        pointerValue = value;
        Gauge.SetPointerValue(0, 0, pointerValue);
        pointerValueText = (Math.Round(pointerValue)).ToString() + "km/h";
        Gauge.SetAnnotationValue(0, 0, pointerValueText);
    }
    private void combineRangeChange(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        combineRangeChecked = args.Checked;
        if (combineRangeChecked)
        {
            firstRangeStart = 0;
            firstRangeEnd = 120;
            firstRangeStartWidth = "5";
            firstRangeEndWidth = "35";
            firstRangeColor = "url(#grad1)";
            secondRangeStart = 0;
            secondRangeEnd = 0;
            secondRangeStartWidth = "";
            secondRangeEndWidth = "";
            secondRangeColor = "";
            thirdRangeStart = 0;
            thirdRangeEnd = 0;
            thirdRangeStartWidth = "";
            thirdRangeEndWidth = "";
            thirdRangeColor = "";
            fourthRangeStart = 0;
            fourthRangeEnd = 0;
            fourthRangeStartWidth = "";
            fourthRangeEndWidth = "";
            fourthRangeColor = "";
            fifthRangeStart = 0;
            fifthRangeEnd = 0;
            fifthRangeStartWidth = "";
            fifthRangeEndWidth = "";
            fifthRangeColor = "";
            sixRangeStart = 0;
            sixRangeEnd = 0;
            sixRangeStartWidth = "";
            sixRangeEndWidth = "";
            sixRangeColor = "";
        }
        else
        {
            firstRangeStart = 0;
            firstRangeEnd = 20;
            firstRangeStartWidth = "5";
            firstRangeEndWidth = "10";
            firstRangeColor = "#82b944";
            secondRangeStart = 20;
            secondRangeEnd = 40;
            secondRangeStartWidth = "10";
            secondRangeEndWidth = "15";
            secondRangeColor = "#a1cb43";
            thirdRangeStart = 40;
            thirdRangeEnd = 60;
            thirdRangeStartWidth = "15";
            thirdRangeEndWidth = "20";
            thirdRangeColor = "#ddec12";
            fourthRangeStart = 60;
            fourthRangeEnd = 80;
            fourthRangeStartWidth = "20";
            fourthRangeEndWidth = "25";
            fourthRangeColor = "#ffbc00";
            fifthRangeStart = 80;
            fifthRangeEnd = 100;
            fifthRangeStartWidth = "25";
            fifthRangeEndWidth = "30";
            fifthRangeColor = "#ff6000";
            sixRangeStart = 100;
            sixRangeEnd = 120;
            sixRangeStartWidth = "30";
            sixRangeEndWidth = "35";
            sixRangeColor = "red";
        }
        gapDisable = args.Checked;
    }
    private void rangeGapChange(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        rangeGapChecked = args.Checked;
        rangeGap = (rangeGapChecked) ? 5 : 0;
    }
}