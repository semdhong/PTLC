@page "/CircularGauge/Compass"


@using Syncfusion.EJ2.Blazor.CircularGauge
@using Syncfusion.EJ2.Blazor.DropDowns

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
	SampleBrowser.CurrentSampleName = "Direction Compass";
	SampleBrowser.CurrentControlName = "CircularGauge";
	SampleBrowser.CurrentControlCategory = "CircularGauge";
    SampleBrowser.TitleTag = "CircularGauge . Compass . Syncfusion Blazor Components - Preview";
    SampleBrowser.MetaDescription = "This demo of Syncfusion Blazor Circular Gauge component illustrates how to make a direction compass by using the circular Gauge";
	SampleBrowser.CurrentControl = SampleBrowser.Config.CircularGauge;
	SampleBrowser.ActionDescription = new string[] {
		@" <p>
			This sample illustrates how to make a direction compass by using the features in gauge. Color of the needle and direction labels can be customized by using options.
		</p>"
	};
	SampleBrowser.Description = new string[] {
		@"<p>
			Circular gauge can be customized as per a user requirement. In this example, a direction compass has been depicted by adding <code> needles </code> and by customizing the <code> labels</code> to show the direction.
		</p>
		<p>
			More information on the gauge can be found in this
			<a target=""_blank"" href=""http://ej2.syncfusion.com/documentation"">documentation section</a>.
		</p>"
	};
}
@*End:Hidden*@
@inherits SampleBaseComponent;
<div class="col-lg-9 control-section sb-property-border">
		<EjsCircularGauge>
            <CircularGaugeEvents AxisLabelRendering="axis"></CircularGaugeEvents>
			<CircularGaugeAxes>
				<CircularGaugeAxis Radius="70%" StartAngle="0" EndAngle="360" Minimum="0" Maximum="8">
					<CircularGaugeAxisLabelStyle AutoAngle="true" HiddenLabel="HiddenLabel.Last" Offset="10">
						<CircularGaugeAxisLabelFont FontFamily="Roboto" Size="12px" Color="@gaugeLabelColor">
						</CircularGaugeAxisLabelFont>
					</CircularGaugeAxisLabelStyle>
					<CircularGaugeRanges>
						<CircularGaugeRange Color="@gaugeLabelColor" Start="7" End="7"> </CircularGaugeRange>
					</CircularGaugeRanges>
					<CircularGaugeAxisLineStyle Width="10" Color="#E0E0E0">
					</CircularGaugeAxisLineStyle>
					<CircularGaugeAxisMajorTicks Height="15" Interval="1">
					</CircularGaugeAxisMajorTicks>
					<CircularGaugeAxisMinorTicks Height="10" Interval="0.5">
					</CircularGaugeAxisMinorTicks>
					<CircularGaugePointers>
						<CircularGaugePointer Value="7" Radius="50%" Color="@gaugePointerColor" PointerWidth="20">
							<CircularGaugeCap Radius="0">
								<CircularGaugeCapBorder Width="0">
								</CircularGaugeCapBorder>
							</CircularGaugeCap>
						</CircularGaugePointer>
						<CircularGaugePointer Value="3" Radius="50%" Color="#9E9E9E" PointerWidth="20">
							<CircularGaugeCap Radius="0">
								<CircularGaugeCapBorder Width="0">
								</CircularGaugeCapBorder>
							</CircularGaugeCap>
						</CircularGaugePointer>
					</CircularGaugePointers>
				</CircularGaugeAxis>
			</CircularGaugeAxes>
		</EjsCircularGauge>
	</div>
<div class="col-md-3 property-section">
	<div class="property-panel-section">
		<div class="property-panel-header">Properties</div>
		<div class="property-panel-content">
			<table id="property" title="Properties" style="width: 100%">
				<tr style="height: 50px">
					<td>
						<div>Pointer Color</div>
					</td>
					<td>
						<div>
							<EjsDropDownList  Width="120" DataSource="@pointerColorData" Value="@pointerColorValue" >
                                <DropDownListEvents TValue="string" ValueChange="@pointerColorChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
							</EjsDropDownList>
						</div>
					</td>
				</tr>
				<tr style="height: 50px">
					<td>
						<div>Label Color</div>
					</td>
					<td>
						<div >
                            <EjsDropDownList Width="120" DataSource="@labelColorData" Value="@labelColorValue">
                                <DropDownListEvents TValue="string" ValueChange="@labelColorChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                            </EjsDropDownList>
						</div>
					</td>
				</tr>
			</table>
		</div>
		</div>
	</div>

@code{
	public string[] Values = {"N", "NE", "E", "SE", "S", "SW", "W", "NW", " " };
	private String pointerColorValue = "#f03e3e";
	private String labelColorValue = "#f03e3e";
	private String gaugePointerColor = "#f03e3e";
	private String gaugeLabelColor = "#f03e3e";
	private List<object> labels = new List<object> { "N", "NE", "E", "SE", "S", "SW", "W", "NW", " " };
	public class PointerColor
	{
		public string Name { get; set; }
	}
	public List<PointerColor> pointerColorData = new List<PointerColor>
	{
		new PointerColor{ Name = "#f03e3e"},
		new PointerColor{ Name = "#4472c4"},
		new PointerColor{ Name = "#ed7d31"},
	};
	public class LabelColor
	{
		public string Name { get; set; }
	}
	public List<LabelColor> labelColorData = new List<LabelColor>
	{
		new LabelColor{ Name = "#f03e3e"},
		new LabelColor{ Name = "#4472c4"},
		new LabelColor{ Name = "#ed7d31"},
	};
	private void pointerColorChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
	{
		pointerColorValue = (args.Value).ToString();
		gaugePointerColor = pointerColorValue;
	}
	private void labelColorChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
	{
		labelColorValue = (args.Value).ToString();
		gaugeLabelColor = labelColorValue;
	}
	void axis(Syncfusion.EJ2.Blazor.CircularGauge.IAxisLabelRenderEventArgs args)
    {
        args.Text = Values[Convert.ToInt32(args.Value)];
    }
} 
