@page "/CircularGauge/Labels"

@using Syncfusion.EJ2.Blazor.CircularGauge
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.Inputs

@inherits SampleBaseComponent;

<div class="col-lg-9 control-section sb-property-border">
        <EjsCircularGauge>
            <CircularGaugeAxes>
                <CircularGaugeAxis StartAngle="210" EndAngle="150" Minimum="0" Maximum="170" Radius="75%" ShowLastLabel="@showLastLabel">
                    <CircularGaugeAxisLabelStyle Position="@gaugeLabelPosition" AutoAngle="true" Offset="@gaugeLabelOffset">
                        <CircularGaugeAxisLabelFont Size="10px">
                        </CircularGaugeAxisLabelFont>
                    </CircularGaugeAxisLabelStyle>
                    <CircularGaugeAxisLineStyle Width="2" Color="#9E9E9E">
                    </CircularGaugeAxisLineStyle>
                    <CircularGaugeAxisMajorTicks Position="@gaugeMajorPosition" Color="#757575" Width="2" Offset="@gaugeMajorOffset" Height="@gaugeMajorHeight" Interval="20">
                    </CircularGaugeAxisMajorTicks>
                    <CircularGaugeAxisMinorTicks Position="@gaugeMinorPosition" Color="#757575" Width="2" Offset="@gaugeMinorOffset" Height="@gaugeMinorHeight" Interval="10">
                    </CircularGaugeAxisMinorTicks>
                    <CircularGaugePointers>
                        <CircularGaugePointer Type="PointerType.RangeBar" Value=145 Radius="60%" Color="#8BC34A" PointerWidth="7" RoundedCornerRadius="10">
                            <CircularGaugePointerAnimation Enable="false" Duration="0">
                            </CircularGaugePointerAnimation>
                        </CircularGaugePointer>
                    </CircularGaugePointers>
                    <CircularGaugeAnnotations>
                        <CircularGaugeAnnotation Angle="0" Radius="0%" ZIndex="1">
                            <ContentTemplate>
                                <div id='content' style='color:#518C03;font-size:20px;font-family:Segoe UI;font-weight:semibold;margin-left:-20px; margin-top:-20px'>145</div>
                            </ContentTemplate>
                        </CircularGaugeAnnotation>
                    </CircularGaugeAnnotations>
                </CircularGaugeAxis>
            </CircularGaugeAxes>
        </EjsCircularGauge>
    </div>
<div class="col-md-3 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table id="property" title="Properties" style="width: 100%">
                <tr>
                    <td>
                        <div> Ticks </div>
                    </td>
                    <td>
                        <div>
                            <EjsDropDownList DataSource="@tickData" Value="@tickValue">
                                <DropDownListEvents ValueChange="tickChange" TValue="string"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Tickvalues"></DropDownListFieldSettings>
                            </EjsDropDownList>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div> Tick Position </div>
                    </td>
                    <td>
                        <div>
                            <EjsDropDownList DataSource="@tickPositionData" Value="@tickPositionValue">
                                <DropDownListEvents ValueChange="tickPositionChange" TValue="string"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="TickPositionValues"></DropDownListFieldSettings>
                            </EjsDropDownList>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div> Label Position </div>
                    </td>
                    <td>
                        <div>
                            <EjsDropDownList DataSource="@LabelPositionData" Value="@labelPositionValue">
                                <DropDownListEvents ValueChange="labelPositionChange" TValue="string"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="LabelPositionValues"></DropDownListFieldSettings>
                            </EjsDropDownList>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div>Tick Offset <span>&nbsp;&nbsp;&nbsp;@tickOffsetText</span> </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@tickOffsetValue" min="0" max="50" @onchange="tickOffsetChange" />
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div>Tick Height <span>&nbsp;&nbsp;&nbsp;@tickHeightText</span> </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@tickHeightValue" min="1" max="50" @onchange="tickHeightChange" />
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div>Label Offset <span>&nbsp;&nbsp;&nbsp;@labelOffsetText</span> </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@labelOffsetValue" min="0" max="50" @onchange="labelOffsetChange" />
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div>Show Last Label </div>
                    </td>
                    <td>
                        <div>
                            <EjsCheckBox ValueChange="lastLabelChange" Checked="@lastLabelChecked"></EjsCheckBox>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>

<style>
    td {
        width: 40%;
    }
</style>

@code {
    private Syncfusion.EJ2.Blazor.CircularGauge.Position gaugeLabelPosition = Syncfusion.EJ2.Blazor.CircularGauge.Position.Outside;
    private Syncfusion.EJ2.Blazor.CircularGauge.Position gaugeMajorPosition = Syncfusion.EJ2.Blazor.CircularGauge.Position.Inside;
    private Syncfusion.EJ2.Blazor.CircularGauge.Position gaugeMinorPosition = Syncfusion.EJ2.Blazor.CircularGauge.Position.Inside;
    private Boolean showLastLabel;
    private Double gaugeMajorOffset;
    private Double gaugeMinorOffset;
    private Double gaugeMajorHeight = 10;
    private Double gaugeMinorHeight = 5;
    private Double gaugeLabelOffset;
    private String tickValue = "major";
    private String tickPositionValue = "Inside";
    private String labelPositionValue = "Outside";
    private Double tickOffsetValue = 0;
    private Double tickHeightValue = 10;
    private Double labelOffsetValue = 0;
    private Boolean lastLabelChecked;
    private Double tickOffsetText = 0;
    private Double tickHeightText = 10;
    private Double labelOffsetText = 0;
    public Boolean IsMajorTick = true;

    public class LabelList
    {
        public string Tickvalues { get; set; }
        public string Name { get; set; }
    }

    private List<LabelList> tickData = new List<LabelList> {
        new LabelList{Tickvalues="major" , Name = "Major Ticks"},
        new LabelList{Tickvalues="minor", Name = "Minor Ticks"},
    };

    public class TickPositionList
    {
        public string TickPositionValues { get; set; }
        public string Name { get; set; }
    }
    private List<TickPositionList> tickPositionData = new List<TickPositionList> {
        new TickPositionList{TickPositionValues="Inside" , Name = "Inside"},
        new TickPositionList{TickPositionValues="Outside", Name = "Outside"}
    };

    public class LabelPositionList
    {
        public string LabelPositionValues { get; set; }
        public string Name { get; set; }
    }
    private List<LabelPositionList> LabelPositionData = new List<LabelPositionList> {
        new LabelPositionList{LabelPositionValues="Inside" , Name = "Inside"},
        new LabelPositionList{LabelPositionValues="Outside", Name = "Outside"}
    };

    private void tickChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        tickValue = args.Value.ToString();
        if (tickValue == "major")
        {
            IsMajorTick = true;
            tickOffsetValue = gaugeMajorOffset;
            tickHeightValue = gaugeMajorHeight;
            tickOffsetText = gaugeMajorOffset;
            tickHeightText = gaugeMajorHeight;
        }
        else
        {
            IsMajorTick = false;
            tickOffsetValue = gaugeMinorOffset;
            tickHeightValue = gaugeMinorHeight;
            tickOffsetText = gaugeMinorOffset;
            tickHeightText = gaugeMinorHeight;
        }
    }
    private void tickPositionChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        tickPositionValue = args.Value.ToString();
        if (IsMajorTick) { gaugeMajorPosition = (tickPositionValue == "Inside") ? Syncfusion.EJ2.Blazor.CircularGauge.Position.Inside : Syncfusion.EJ2.Blazor.CircularGauge.Position.Outside; }
        else { gaugeMinorPosition = (tickPositionValue == "Inside") ? Syncfusion.EJ2.Blazor.CircularGauge.Position.Inside : Syncfusion.EJ2.Blazor.CircularGauge.Position.Outside; }
    }
    private void labelPositionChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        labelPositionValue = args.Value.ToString();
        gaugeLabelPosition = labelPositionValue == "Inside" ? Syncfusion.EJ2.Blazor.CircularGauge.Position.Inside : Syncfusion.EJ2.Blazor.CircularGauge.Position.Outside;
    }
    private void tickOffsetChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        tickOffsetValue = Convert.ToDouble(args.Value);
        if (IsMajorTick) { gaugeMajorOffset = tickOffsetValue; }
        else { gaugeMinorOffset = tickOffsetValue; }
        tickOffsetText = tickOffsetValue;
    }
    private void tickHeightChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        tickHeightValue = Convert.ToDouble(args.Value);
        if (IsMajorTick) { gaugeMajorHeight = tickHeightValue; }
        else { gaugeMinorHeight = tickHeightValue; }
        tickHeightText = tickHeightValue;
    }
    private void labelOffsetChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        labelOffsetValue = Convert.ToDouble(args.Value);
        gaugeLabelOffset = labelOffsetValue;
        labelOffsetText = labelOffsetValue;
    }
    private void lastLabelChange(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        lastLabelChecked = args.Checked;
        showLastLabel = args.Checked;
    }
}