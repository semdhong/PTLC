@page "/CircularGauge/CircularGaugeLegend"

@using Syncfusion.EJ2.Blazor.CircularGauge
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.Buttons

@inherits SampleBaseComponent;

<div class="col-lg-9 control-section sb-property-border">
    <EjsCircularGauge Title="Measure of wind speed in Km/h">
        <CircularGaugeLegendSettings Shape="@legendShapeValue" Alignment="@legendAlignValue" ToggleVisibility="@toggleLegend" Visible="@enableLegend" Position="@legendValue"></CircularGaugeLegendSettings>
        <CircularGaugeAxes>
            <CircularGaugeAxis StartAngle="210" EndAngle="150" Minimum="0" Maximum="120" Radius="80%">
                <CircularGaugeAxisLineStyle Width="2"></CircularGaugeAxisLineStyle>
                <CircularGaugeAxisLabelStyle Position="Position.Inside" UseRangeColor="false">
                    <CircularGaugeAxisLabelFont Size="12px" FontFamily="Roboto" FontStyle="Regular" Color="#424242"></CircularGaugeAxisLabelFont>
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisMajorTicks Height="16" Color="#9E9E9E" Interval="20"></CircularGaugeAxisMajorTicks>
                <CircularGaugeAxisMinorTicks Height="8" Interval="10"></CircularGaugeAxisMinorTicks>
                <CircularGaugeRanges>
                    <CircularGaugeRange Start="0" End="5" Color="#ccffff" Radius="110%" LegendText="Light air"></CircularGaugeRange>
                    <CircularGaugeRange Start="5" End="11" Color="#99ffff" Radius="110%" LegendText="Light Breeze"></CircularGaugeRange>
                    <CircularGaugeRange Start="11" End="19" Color="#99ff99" Radius="110%" LegendText="Gentle Breeze"></CircularGaugeRange>
                    <CircularGaugeRange Start="19" End="28" Color="#79ff4d" Radius="110%" LegendText="Moderate Breeze"></CircularGaugeRange>
                    <CircularGaugeRange Start="28" End="49" Color="#c6ff1a" Radius="110%" LegendText="Strong Breeze"></CircularGaugeRange>
                    <CircularGaugeRange Start="49" End="74" Color="#e6ac00" Radius="110%" LegendText="Gale"></CircularGaugeRange>
                    <CircularGaugeRange Start="74" End="102" Color="#ff6600" Radius="110%" LegendText="Storm"></CircularGaugeRange>
                    <CircularGaugeRange Start="102" End="120" Color="#ff0000" Radius="110%" LegendText="Hurricane force"></CircularGaugeRange>
                </CircularGaugeRanges>
                <CircularGaugePointers>
                    <CircularGaugePointer Value="70" PointerWidth="8" Color="#757575" Radius="60%">
                        <CircularGaugePointerAnimation Enable="true"></CircularGaugePointerAnimation>
                        <CircularGaugeCap Radius="7" Color="#757575"></CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="18%"></CircularGaugeNeedleTail>
                    </CircularGaugePointer>
                </CircularGaugePointers>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </EjsCircularGauge>
</div>
<div class="col-md-3 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table title="Properties" style="width: 100%">
                <tr style="height: 50px">
                    <td>
                        <div> Show legend </div>
                    </td>
                    <td>
                        <div>
                            <EjsCheckBox ValueChange="@legendChange" Checked="@legendChecked"></EjsCheckBox>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr style="height: 50px">
                    <td>
                        <div> Show range when the legend item is toggled  </div>
                    </td>
                    <td>
                        <div>
                            <EjsCheckBox ValueChange="@toggleLegendChange" Checked="@toggleLegendChecked"></EjsCheckBox>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr style="height: 50px">
                    <td>
                        <div> Position  </div>
                    </td>
                    <td>
                        <div>
                            <EjsDropDownList DataSource="@legendPosition" Value="@positionValue">
                                <DropDownListEvents TValue="string" ValueChange="positionList"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                            </EjsDropDownList>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr style="height: 50px">
                    <td>
                        <div> Alignment  </div>
                    </td>
                    <td>
                        <div>
                            <EjsDropDownList DataSource="@legendAlignment" Value="@alignmentValue">
                                <DropDownListEvents TValue="string" ValueChange="alignmentList"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                            </EjsDropDownList>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr style="height: 50px">
                    <td>
                        <div> Shape  </div>
                    </td>
                    <td>
                        <div>
                            <EjsDropDownList DataSource="@legendShape" Value="@shapeValue">
                                <DropDownListEvents TValue="string" ValueChange="shapeList"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                            </EjsDropDownList>
                        </div>
                    </td>
                </tr>&nbsp;
            </table>
        </div>
    </div>
</div>
<style>

    td {
        width: 40%;
    }
</style>

@code{
    private string positionValue = "Bottom";
    public LegendPosition legendValue = LegendPosition.Bottom;
    private string alignmentValue = "Center";
    private Alignment legendAlignValue = Alignment.Center;
    private string shapeValue = "Circle";
    private GaugeShape legendShapeValue = GaugeShape.Circle;
    private Boolean legendChecked = true;
    private Boolean enableLegend = true;
    private Boolean toggleLegendChecked = true;
    private Boolean toggleLegend = true;
    public class DropdownList
    {
        public string Value { get; set; }
        public string Name { get; set; }
    };
    public List<DropdownList> legendPosition = new List<DropdownList> {
        new DropdownList { Value="Bottom", Name="Bottom" },
        new DropdownList { Value="Top", Name="Top" },
        new DropdownList { Value="Left", Name="Left" },
        new DropdownList { Value="Right", Name="Right" },
        new DropdownList { Value="Auto", Name="Auto" }
    };
    public List<DropdownList> legendAlignment = new List<DropdownList> {
        new DropdownList { Value="Center", Name="Center" },
        new DropdownList { Value="Far", Name="Far" },
        new DropdownList { Value="Near", Name="Near" },
    };
    public List<DropdownList> legendShape = new List<DropdownList> {
        new DropdownList { Value="Circle", Name="Circle" },
        new DropdownList { Value="Rectangle", Name="Rectangle" },
        new DropdownList { Value="Triangle", Name="Triangle" },
        new DropdownList { Value="Diamond", Name="Diamond" },
        new DropdownList { Value="Inverted Triangle", Name="Inverted Triangle" }
    };
    private void legendChange(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        legendChecked = args.Checked;
        enableLegend = legendChecked;
    }
    private void toggleLegendChange(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        toggleLegendChecked = args.Checked;
        toggleLegend = toggleLegendChecked;
    }
    private void positionList(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        positionValue = (args.Value).ToString();
        if (positionValue == "Bottom")
        {
            legendValue = LegendPosition.Bottom;
        }
        else if (positionValue == "Top")
        {
            legendValue = LegendPosition.Top;
        }
        else if (positionValue == "Left")
        {
            legendValue = LegendPosition.Left;
        }
        else if (positionValue == "Right")
        {
            legendValue = LegendPosition.Right;
        }
        else if (positionValue == "Auto")
        {
            legendValue = LegendPosition.Auto;
        }
    }
    private void alignmentList(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        alignmentValue = (args.Value).ToString();
        if (alignmentValue == "Center")
        {
            legendAlignValue = Alignment.Center;
        }
        else if (alignmentValue == "Far")
        {
            legendAlignValue = Alignment.Far;
        }
        else if (alignmentValue == "Near")
        {
            legendAlignValue = Alignment.Near;
        }
    }
    private void shapeList(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        shapeValue = (args.Value).ToString();
        if (shapeValue == "Circle")
        {
            legendShapeValue = GaugeShape.Circle;
        }
        else if (shapeValue == "Rectangle")
        {
            legendShapeValue = GaugeShape.Rectangle;
        }
        else if (shapeValue == "Triangle")
        {
            legendShapeValue = GaugeShape.Triangle;
        }
        else if (shapeValue == "Diamond")
        {
            legendShapeValue = GaugeShape.Diamond;
        }
        else if (shapeValue == "Inverted Triangle")
        {
            legendShapeValue = GaugeShape.InvertedTriangle;
        }
    }



}

