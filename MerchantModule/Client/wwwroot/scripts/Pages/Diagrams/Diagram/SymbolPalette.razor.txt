@page "/Diagrams/SymbolPalette"

@using Syncfusion.EJ2.Blazor.Diagrams

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Symbol Palette";
    SampleBrowser.CurrentControlName = "Diagram";
    SampleBrowser.CurrentControlCategory = "Diagram";
    SampleBrowser.TitleTag = "Diagram . SymbolPalette . Syncfusion Blazor Components - Preview";
    SampleBrowser.MetaDescription = "This demo for EJ2 Blazor Diagram control illustrates a diagram where predefined shapes can be dragged and dropped from the palette.";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Diagram;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
           This example illustrates predefining shapes in a palette that can be easily dragged and dropped into the
        drawing area. Customizable options of the symbol palette are also illustrated in this example.
        </p>
        </p>
          <p>
        In this example, options to enable/disable animation, show/hide symbol descriptions, and show header icons are
        provided.
    </p>

        "
    };
    SampleBrowser.Description = new string[] {
        @"<p>
             This example shows how to add shapes to symbol palette and how to customize it. The <code>Symbols</code>
        property can be used to add shapes to the symbol palette. The <code>SymbolWidth</code> and <code>SymbolHeight</code>
        properties allow you to define the size of the symbols.

        </p>
        <br>"
    };
}
@*End:Hidden*@

<div class="content-wrapper"  style="width: 100%">
    <link href="https://ej2.syncfusion.com/javascript/demos/src/diagram/styles/diagram-common.css" rel="stylesheet">
        <div id="palette-icon" style="float: right;" role="button" class="e-ddb-icons1 e-toggle-palette"></div>
    <div id="palette-space" class="sb-mobile-palette">
        <EjsSymbolPalette id="palettes" Width="100%" Height="700px" SymbolHeight="80" SymbolWidth="80">
            <SymbolMargin Left="15" Right="15" Bottom="15" Top="15"></SymbolMargin>
            <SymbolPalettePalettes>
                <SymbolPalettePalette Id="flow" Expanded="true" Symbols="@flowShapes" IconCss="e-ddb-icons e-flow" Title="Flow Shapes">
                </SymbolPalettePalette>
                <SymbolPalettePalette Id="basic" Expanded="true" Symbols="@basicShapes" IconCss="e-ddb-icons e-basic" Title="Basic Shapes">
                </SymbolPalettePalette>
                <SymbolPalettePalette Id="connectors" Expanded="true" Symbols="@connectors" IconCss="e-ddb-icons e-connector" Title="Connectors">
                </SymbolPalettePalette>
            </SymbolPalettePalettes>
        </EjsSymbolPalette>
    </div>
</div>


@code{
    private double[] lineIntervals { get; set; } = new double[] {
                1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75
                };

    private List<object> segment1 { get; set; } = new List<object> {
        new { direction= "Top", type= "Orthogonal", length= 120 }
    };
    private List<object> segment2 { get; set; } = new List<object>{
        new  { direction= "Right", type= "Orthogonal", length= 100 }
    };

    private List<DiagramNode> flowShapes { get; set; } = new List<DiagramNode> {
        new DiagramNode(){Id="Terminator" , Shape = new DiagramFlowShape(){
            Type = Syncfusion.EJ2.Blazor.Diagrams.Shapes.Flow,Shape=FlowShapes.Terminator }
        },
        new DiagramNode(){Id="Process" , Shape = new DiagramFlowShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Flow,Shape=FlowShapes.Process }
    },
        new DiagramNode(){Id="Sort" , Shape = new DiagramFlowShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Flow,Shape=FlowShapes.Sort }
    },
        new DiagramNode(){Id="Document" , Shape = new DiagramFlowShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Flow,Shape=FlowShapes.Document }
    },
        new DiagramNode(){Id="PreDefinedProcess" , Shape = new DiagramFlowShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Flow,Shape=FlowShapes.PreDefinedProcess }
    },
        new DiagramNode(){Id="PaperTap" , Shape = new DiagramFlowShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Flow,Shape=FlowShapes.PaperTap }
    },
        new DiagramNode(){Id="DirectData" , Shape = new DiagramFlowShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Flow,Shape=FlowShapes.DirectData }
    },
        new DiagramNode(){Id="SequentialData" , Shape = new DiagramFlowShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Flow,Shape=FlowShapes.SequentialData }
    },

    };

   private List<DiagramNode> basicShapes { get; set; } = new List<DiagramNode> {
        new DiagramNode(){Id="Rectangle" , Shape = new DiagramBasicShape(){
            Type = Syncfusion.EJ2.Blazor.Diagrams.Shapes.Basic,Shape=BasicShapes.Rectangle}
        },
        new DiagramNode(){Id="Ellipse" , Shape = new DiagramBasicShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Basic,Shape=BasicShapes.Ellipse }
    },
        new DiagramNode(){Id="Parallelogram" , Shape = new DiagramBasicShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Basic,Shape=BasicShapes.Parallelogram }
    },
        new DiagramNode(){Id="Triangle" , Shape = new DiagramBasicShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Basic,Shape=BasicShapes.Triangle }
    },
        new DiagramNode(){Id="Hexagon" , Shape = new DiagramBasicShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Basic,Shape=BasicShapes.Hexagon }
    },
        new DiagramNode(){Id="Pentagon" , Shape = new DiagramBasicShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Basic,Shape=BasicShapes.Pentagon }
    },
        new DiagramNode(){Id="Cylinder" , Shape = new DiagramBasicShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Basic,Shape=BasicShapes.Cylinder }
    },
        new DiagramNode(){Id="Star" , Shape = new DiagramBasicShape(){
        Type =Syncfusion.EJ2.Blazor.Diagrams.Shapes.Basic, Shape=BasicShapes.Star }
    },

    };


    private List<DiagramConnector> connectors { get; set; } = new List<DiagramConnector>
{
        new DiagramConnector(){Id="Link21" ,  Type=Segments.Orthogonal,SourcePoint= new ConnectorSourcePoint(){ X=0,Y=0 },TargetPoint = new ConnectorTargetPoint(){  X=40,Y=40},
          TargetDecorator= new ConnectorTargetDecorator(){ Shape=DecoratorShapes.Arrow},Style= new ConnectorShapeStyle(){ StrokeWidth=1}
        },
        new DiagramConnector(){Id="link2" ,  Type=Segments.Orthogonal,SourcePoint= new ConnectorSourcePoint(){ X=0,Y=0 },TargetPoint = new ConnectorTargetPoint(){   X=40,Y=40},
         TargetDecorator= new ConnectorTargetDecorator(){ Shape=DecoratorShapes.None},Style= new ConnectorShapeStyle(){ StrokeWidth=1}
        },
        new DiagramConnector(){Id="Link21" ,  Type=Segments.Straight,SourcePoint= new ConnectorSourcePoint(){ X=0,Y=0 },TargetPoint = new ConnectorTargetPoint(){  X=40,Y=40},
          TargetDecorator= new ConnectorTargetDecorator(){ Shape=DecoratorShapes.Arrow},Style= new ConnectorShapeStyle(){ StrokeWidth=1}
        },
        new DiagramConnector(){Id="link23" ,  Type=Segments.Straight,SourcePoint= new ConnectorSourcePoint(){ X=0,Y=0 },TargetPoint = new ConnectorTargetPoint(){  X=40,Y=40},
          TargetDecorator= new ConnectorTargetDecorator(){ Shape=DecoratorShapes.None},Style= new ConnectorShapeStyle(){ StrokeWidth=1}
        },
        new DiagramConnector(){Id="link33" ,  Type=Segments.Bezier,SourcePoint= new ConnectorSourcePoint(){ X=0,Y=0 },TargetPoint = new ConnectorTargetPoint(){ X=40,Y=40},
          TargetDecorator= new ConnectorTargetDecorator(){ Shape=DecoratorShapes.None},Style= new ConnectorShapeStyle(){ StrokeWidth=1}
        }
    };
}

