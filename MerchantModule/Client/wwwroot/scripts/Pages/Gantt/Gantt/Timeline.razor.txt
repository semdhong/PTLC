@page "/Gantt/Timeline"

@using Syncfusion.EJ2.Blazor.Gantt
@using Syncfusion.EJ2.Blazor.Inputs
@using Syncfusion.EJ2.Blazor.Buttons;
@using Syncfusion.EJ2.Blazor.DropDowns;
@using ej2_blazor_samples
@using ej2_blazor_ganttdata

@inherits SampleBaseComponent;
<div class="col-lg-8 control-section sb-property-border">
    <div class="content-wrapper">
        <div class="row">
            <EjsGantt @ref="GanttObject" DataSource="@TaskCollection" Height="450px" Width="100%" Resources="@ResourceCollection"
                      ResourceNameMapping="ResourceName" ResourceIDMapping="ResourceId" ProjectStartDate="02/03/2019" ProjectEndDate="03/23/2019">
                <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                                 Dependency="Predecessor" Child="SubTasks" Notes="Notes" ResourceInfo="ResourceId">
                </GanttTaskFields>
                <GanttEventMarkers>
                    <GanttEventMarker Day="02/08/2019" Label="Project kick-off"></GanttEventMarker>
                </GanttEventMarkers>
                <GanttLabelSettings>
                    <RightLabelTemplate>
                        <div class="e-right-label-inner-div" style="height:22px;margin-top:7px;">
                            <span class="e-label">@((context as GanttData.TaskData).TaskName)</span>
                        </div>
                    </RightLabelTemplate>
                </GanttLabelSettings>
                <GanttSplitterSettings ColumnIndex="0"></GanttSplitterSettings>
                <GanttTimelineSettings TimelineUnitSize="@DefaultUnitWidth">
                    <GanttTopTierSettings Unit="@TopTierUnit" Count="@TopTierCount" Format="@TopTierFormat"></GanttTopTierSettings>
                    <GanttBottomTierSettings Count="@BottomTierCount" Unit="@BottomTierUnit" Format="@BottomTierFormat"></GanttBottomTierSettings>
                </GanttTimelineSettings>
            </EjsGantt>
        </div>
    </div>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div><div class="property-panel-content">
            <table id="property" title="Properties" class="property-panel-table">
                <tbody>
                    <tr>
                        <td style="width: 50%">
                            <div class="userselect">Unit width</div>
                        </td>
                        <td style="width: 50%;padding-right: 10px">
                            <div>
                                <EjsNumericTextBox TValue="int?" Format="n" Value="@DefaultUnitWidth" Min="10">
                                    <NumericTextBoxEvents TValue="int?" ValueChange="@(e => { DefaultUnitWidth = (int)e.Value; })"></NumericTextBoxEvents>
                                </EjsNumericTextBox>
                            </div>
                        </td>
                    </tr>

                    <tr>
                        <td style="width:30%;"><div><b>Top tier</b></div></td>
                        <td style="width: 70%">
                            <div>
                                <EjsCheckBox ValueChange="@TopTierCheckChange" @bind-Checked="@TopCheckboxEnabled"></EjsCheckBox>
                            </div>
                        </td>
                    </tr>

                    <tr>
                        <td style="width:30%;"><div>Count</div></td>
                        <td style="width: 70%">
                            <div>
                                <EjsNumericTextBox Enabled="@EnableTopNumericBox"  TValue="int?" Format="n" Value="@TopTierCount" Min="1" Max="50">
                                    <NumericTextBoxEvents TValue="int?" ValueChange="@(e => { TopTierCount = (int)e.Value; })"></NumericTextBoxEvents>
                                </EjsNumericTextBox>
                            </div>
                        </td>
                    </tr>

                    <tr>
                        <td style="width:30%;"><div>Unit</div></td>
                        <td style="width: 70%">
                            <div>
                                <EjsDropDownList Enabled="@EnableTopUnitDropDown" TValue="string" TItem="TimelineUnit" Placeholder="Week" DataSource="@TimelineUnits">
                                    <DropDownListFieldSettings Text="Unit" Value="Id"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="string" ValueChange="@TopUnitChange"></DropDownListEvents>
                                </EjsDropDownList>
                            </div>
                        </td>
                    </tr>

                    <tr>
                        <td style="width:30%;"><div>Format</div></td>
                        <td style="width: 70%">
                            <div>
                                <EjsDropDownList Enabled="@EnableTopFormatDropDown" TValue="string" TItem="DayFormat" DataSource="@WeekFormatValue">
                                    <DropDownListFieldSettings Text="Format" Value="Id"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="string" ValueChange="@TopFormatChange"></DropDownListEvents>
                                </EjsDropDownList>
                            </div>
                        </td>
                    </tr>
                    

                    <tr>
                        <td style="width:30%;"><div><b>Bottom tier</b></div></td>
                        <td style="width: 70%">
                            <div>
                                <EjsCheckBox ValueChange="@BottomTierCheckChange" @bind-Checked="@BottomCheckEnabled"></EjsCheckBox>
                            </div>
                        </td>
                    </tr>

                    <tr>
                        <td style="width:30%;"><div>Count</div></td>
                        <td style="width: 70%">
                            <div>
                                <EjsNumericTextBox Enabled="@EnableBottomNumericBox" TValue="int?" Format="n" Value="@BottomTierCount" Min="1" Max="50">
                                    <NumericTextBoxEvents TValue="int?" ValueChange="@(e => { BottomTierCount = (int)e.Value; })"></NumericTextBoxEvents>
                                </EjsNumericTextBox>
                            </div>
                        </td>
                    </tr>

                    <tr>
                        <td style="width:30%;"><div>Unit</div></td>
                        <td style="width: 70%">
                            <div>
                                <EjsDropDownList Enabled="@EnableBottomUnitDropDown" TValue="string" TItem="TimelineUnit" Placeholder="Day" DataSource="@TimelineUnits">
                                    <DropDownListFieldSettings Text="Unit" Value="Id"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="string" ValueChange="@BottomUnitChange"></DropDownListEvents>
                                </EjsDropDownList>
                            </div>
                        </td>
                    </tr>

                    <tr>
                        <td style="width:30%;"><div>Format</div></td>
                        <td style="width: 70%">
                            <div>
                                <EjsDropDownList Enabled="@EnableBottomFormatDropDown" TValue="string" TItem="DayFormat" DataSource="@DayFormatValue">
                                    <DropDownListFieldSettings Text="Format" Value="Id"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="string" ValueChange="@BottomFormatChange"></DropDownListEvents>
                                </EjsDropDownList>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code{
    public List<GanttData.TaskData> TaskCollection { get; set; }
    public List<GanttData.TaskResources> ResourceCollection { get; set; }
    public int DefaultUnitWidth = 33;
    public int TopTierCount = 1;
    public int BottomTierCount = 1;
    public string DefaultFormatvalue = "MMM dd, yyyy";
    public bool TopCheckboxEnabled = true;
    public bool BottomCheckEnabled = true;
    public string DefaultBottomTierValue = "Day";
    public bool EnableTopNumericBox = true;
    public bool EnableTopUnitDropDown = true;
    public bool EnableTopFormatDropDown = true;
    public bool EnableBottomNumericBox = true;
    public bool EnableBottomUnitDropDown = true;
    public bool EnableBottomFormatDropDown = true;
    string TopTierFormat = "MMM dd, yyyy";
    string BottomTierFormat = "";
    TimelineViewMode TopTierUnit = TimelineViewMode.Week;
    TimelineViewMode BottomTierUnit = TimelineViewMode.Day;
    public EjsGantt<GanttData.TaskData> GanttObject;
    List<DayFormat> YearFormats = new List<DayFormat>()
    {
        new DayFormat { Id ="MMM ''yy", Format = "Jan '18" },
        new DayFormat {  Id = "y", Format = "2018"   },
        new DayFormat { Id = "MMMM, y", Format = "January, 18" },

    };
    List<DayFormat> MonthFormats = new List<DayFormat>()
    {
        new DayFormat { Id = "MMM dd, yyyy", Format = "Jan 01, 2018" },
        new DayFormat { Id = "MMMM", Format = "January" },
        new DayFormat { Id = "MMM", Format = "Jan" },

    };
    List<DayFormat> WeekFormats = new List<DayFormat>()
    {
        new DayFormat  { Id = "MMM dd, yyyy", Format = "Jan 01, 2019" },
        new DayFormat  { Id = "EEE MMM dd, 'yy", Format = "Mon Jan 01, '9" },
        new DayFormat  { Id = "EEE MMM dd", Format = "Mon Jan 01" },

    };
    List<DayFormat> DayFormats = new List<DayFormat>()
    {
        new DayFormat  { Id = "EEE, dd", Format = "Mon, 01" },
        new DayFormat  { Id = "E", Format = "Mon" },
        new DayFormat  { Id = "dd", Format = "01" },

    };
    List<DayFormat> HourFormats = new List<DayFormat>()
    {
        new DayFormat  { Id = "hh", Format = "00" },
        new DayFormat  { Id = "hh : mm a", Format = "00 : 00 AM" },
        new DayFormat  { Id = "h : mm a", Format = "0 : 00 AM" },

    };
    List<TimelineUnit> TimelineUnits = new List<TimelineUnit>()
    {
        new TimelineUnit { Id = "Year", Unit = "Year"  },
        new TimelineUnit { Id = "Month", Unit = "Month" },
        new TimelineUnit { Id = "Week", Unit = "Week" },
        new TimelineUnit { Id = "Day", Unit = "Day" },
        new TimelineUnit { Id = "Hour", Unit = "Hour" }
    };
    List<DayFormat> WeekFormatValue = new List<DayFormat>()
    {
        new DayFormat { Id = "MMM dd, yyyy", Format = "Jan 01, 2019"   },
        new DayFormat {  Id = "EEE MMM dd, 'yy", Format = "Mon Jan 01, '19"  },
        new DayFormat { Id = "EEE MMM dd", Format = "Mon Jan 01" },

    };
    List<DayFormat> DayFormatValue = new List<DayFormat>()
    {
        new DayFormat { Id = "EEE, dd", Format = "Mon, 01" },
        new DayFormat { Id = "E", Format = "Mon" },
        new DayFormat { Id = "dd", Format = "01" }

    };

    public class TimelineUnit
    {
        public string Id { get; set; }
        public string Unit { get; set; }
    }
    public class DayFormat
    {
        public string Id { get; set; }
        public string Format { get; set; }
    }
    protected override void OnInitialized()
    {
        this.TaskCollection = GanttData.TimelineData();
        this.ResourceCollection = GanttData.EditingResources();
    }
    public void TopTierCheckChange(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        if (args.Checked)
        {
            TopTierUnit = TimelineViewMode.Week;
            EnableTopNumericBox = true;
            EnableTopUnitDropDown = true;
            EnableTopFormatDropDown = true;
        }
        else
        {
            TopTierUnit = TimelineViewMode.None;
            EnableTopNumericBox = false;
            EnableTopUnitDropDown = false;
            EnableTopFormatDropDown = false;
        }
    }

    public void BottomTierCheckChange(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        if (args.Checked)
        {
            BottomTierUnit = TimelineViewMode.Day;
            EnableBottomNumericBox = true;
            EnableBottomUnitDropDown = true;
            EnableBottomFormatDropDown = true;
        }
        else
        {
            BottomTierUnit = TimelineViewMode.None;
            EnableBottomNumericBox = false;
            EnableBottomUnitDropDown = false;
            EnableBottomFormatDropDown = false;
        }
    }
    public void TopUnitChange(ChangeEventArgs<string> args)
    {
        TimelineViewMode changedTopUnit;
        switch (args.Value)
        {
            case "Year":
                changedTopUnit = TimelineViewMode.Year;
                WeekFormatValue = YearFormats;
                break;
            case "Month":
                changedTopUnit = TimelineViewMode.Month;
                WeekFormatValue = MonthFormats;
                break;
            case "Week":
                changedTopUnit = TimelineViewMode.Week;
                WeekFormatValue = WeekFormats;
                break;
            case "Day":
                changedTopUnit = TimelineViewMode.Day;
                WeekFormatValue = DayFormats;
                break;
            case "Hour":
                changedTopUnit = TimelineViewMode.Hour;
                WeekFormatValue = HourFormats;
                break;
            default:
                changedTopUnit = TimelineViewMode.Week;
                break;

        }

        this.updateUnitWidth(args.Value, "top");
        TopTierUnit = changedTopUnit;

    }

    public void BottomUnitChange(ChangeEventArgs<string> args)
    {
        TimelineViewMode changedBottomUnit;
        switch (args.Value)
        {
            case "Year":
                changedBottomUnit = TimelineViewMode.Year;
                DayFormatValue = YearFormats;
                break;
            case "Month":
                changedBottomUnit = TimelineViewMode.Month;
                DayFormatValue = MonthFormats;
                break;
            case "Week":
                changedBottomUnit = TimelineViewMode.Week;
                DayFormatValue = WeekFormats;
                break;
            case "Day":
                changedBottomUnit = TimelineViewMode.Day;
                DayFormatValue = DayFormats;
                break;
            case "Hour":
                changedBottomUnit = TimelineViewMode.Hour;
                DayFormatValue = HourFormats;
                break;
            default:
                changedBottomUnit = TimelineViewMode.Day;
                break;
        }
        this.updateUnitWidth(args.Value, "bottom");
        BottomTierUnit = changedBottomUnit;
    }

    public void TopFormatChange(ChangeEventArgs<string> args)
    {
        TopTierFormat = args.Value;
    }
    public void BottomFormatChange(ChangeEventArgs<string> args)
    {
        BottomTierFormat = args.Value;
    }
    void updateUnitWidth(string unit, string tier)
    {
        int unitWidth;
        string topUnit = tier == "top" ? unit : TopTierUnit.ToString();
        string bottomUnit = tier == "bottom" ? unit : BottomTierUnit.ToString();
        string[] units = new string[6] { "None", "Hour", "Day", "Week", "Month", "Year" };
        string bootomCellUnit;

        if (Array.IndexOf(units, topUnit) == 0 &&  Array.IndexOf(units, bottomUnit) == 0) {
            bootomCellUnit = "Day";
        } else if (Array.IndexOf(units, topUnit) == 0  && Array.IndexOf(units, bottomUnit) > 0) {
            bootomCellUnit = bottomUnit;
        } else if (Array.IndexOf(units, topUnit) > 0 && Array.IndexOf(units, bottomUnit) == 0) {
            bootomCellUnit = topUnit;
        } else if (Array.IndexOf(units, topUnit) <= Array.IndexOf(units, bottomUnit)) {
            bootomCellUnit = topUnit;
        } else {
            bootomCellUnit = bottomUnit;
        }

        switch (bootomCellUnit)
        {
            case "Year":
                unitWidth = 2000;
                break;
            case "Month":
                unitWidth = 300;
                break;
            case "Week":
                unitWidth = 150;
                break;
            case "Day":
                unitWidth = 33;
                break;
            case "Hour":
                unitWidth = 25;
                break;
            default:
                unitWidth = 33;
                break;
        }
        DefaultUnitWidth = unitWidth;
    }
    }
<style>
    .userselect {
        -webkit-user-select: none;
        /* Safari 3.1+ */
        -moz-user-select: none;
        /* Firefox 2+ */
        -ms-user-select: none;
        /* IE 10+ */
        user-select: none;
        /* Standard syntax */
    }
</style>