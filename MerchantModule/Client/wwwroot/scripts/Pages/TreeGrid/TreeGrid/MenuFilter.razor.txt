@page "/TreeGrid/MenuFilter"

@using Syncfusion.EJ2.Blazor.TreeGrid
@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.Data
@using Syncfusion.EJ2.Blazor

@*Hidden:Lines*@
@using ej2_blazor_samples
@using ej2_blazor_selfdata
@{
    SampleBrowser.CurrentSampleName = "Menu Filter";
    SampleBrowser.CurrentControlName = "TreeGrid";
    SampleBrowser.CurrentControlCategory = "TreeGrid";
    SampleBrowser.CurrentControl = SampleBrowser.Config.TreeGrid;
    SampleBrowser.TitleTag = "Tree Grid . Menu Filter . Syncfusion Blazor Components - Preview";
    SampleBrowser.MetaDescription = "This demo for Syncfusion Blazor TreeGrid component explains the way of filtering rows using a menu, check box, and Excel filter UI.";
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
            This sample demonstrates the way of filtering TreeGrid columns using menu and excel filter UI. In this sample, click the filtering
        icon from column header to show filter UI for a particular column.
        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
            The filtering feature enables the user to view the reduced amount of records based on filter criteria. It can be enabled
        by setting <code>AllowFiltering
        </code> property as true.
        </p>
        <p>TreeGrid supports the following filter types. They are </p>
        <ul>
            <li><code>FilterBar</code></li>
                <li><code>Menu</code></li>
                <li><code>Excel</code></li>
        </ul>
        you can change the filter type by setting <code>TreeGridFilterSettings->Type</code>.
        <p>TreeGrid provides support for a set of filtering modes with hierarchyMode property. The below are the type of filter mode available in TreeGrid. </p>
        <ul>
           <li><code>Parent</code> - This is the default filter hierarchy mode in TreeGrid. 
           The filtered records are displayed with its parent records, if the filtered records not have any parent record then the filtered record only displayed.</li>
           <li><code>Child</code> - The filtered records are displayed with its child record, if the filtered records do not have any child record then only the filtered records are displayed.</li>
           <li><code>Both</code> - The filtered records are displayed with its both parent and child record.
           If the filtered records do not have any parent and child record then only the filtered records are displayed.</li>
           <li><code>None</code> - Only the filtered records are displayed.</li>
         </ul>

        <p>In this demo, filter menu enabled by default, you can switch to other hierarchy mode of filtering by using dropdown.</p>"
    };
}
@*End:Hidden*@

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <EjsTreeGrid DataSource="TreeData" AllowFiltering="true" AllowPaging="true" IdMapping="TaskID" ParentIdMapping="ParentID" TreeColumnIndex="1">
                <TreeGridFilterSettings Type="Syncfusion.EJ2.Blazor.TreeGrid.FilterType.Menu"></TreeGridFilterSettings>
                <TreeGridPageSettings PageSize="10"></TreeGridPageSettings>
                <TreeGridColumns>
                    <TreeGridColumn Field="TaskID" HeaderText="Task ID" Width="60" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="80"></TreeGridColumn>
                    <TreeGridColumn Field="StartDate" HeaderText=" Start Date" Format="d" Type=ColumnType.Date Width="90" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Duration" HeaderText="Duration" Width="80" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Progress" HeaderText="Progress" Width="80"></TreeGridColumn>
                </TreeGridColumns>
            </EjsTreeGrid>
        </div>
    </div>
</div>

@code{

    public List<SelfReferenceData> TreeData { get; set; }

    protected override void OnInitialized()
    {
        this.TreeData = SelfReferenceData.GetTree().Take(12).ToList();
    }
}
