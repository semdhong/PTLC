@page "/TreeGrid/ToolBarTemplate"

@using Syncfusion.EJ2.Blazor.TreeGrid
@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.Data
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Navigations

@*Hidden:Lines*@
@using ej2_blazor_samples
@using ej2_blazor_selfdata
@{
    SampleBrowser.CurrentSampleName = "Toolbar Template";
    SampleBrowser.CurrentControlName = "TreeGrid";
    SampleBrowser.CurrentControlCategory = "TreeGrid";
    SampleBrowser.CurrentControl = SampleBrowser.Config.TreeGrid;
    SampleBrowser.TitleTag = "Tree Grid . Toolbar Template . Syncfusion Blazor Components - Preview";
    SampleBrowser.MetaDescription = "This demo for Syncfusion Blazor TreeGrid component explains how to render custom template elements in a toolbar by which any custom operation can be performed in TreeGrid.";
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
            This sample explains the way of rendering custom template element Quick Filter in a toolbar and while click on the icon filters the Task Name column in TreeGrid using API.
        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
           Custom toolbar items can be added by defining the toolbar as a collection of ItemModels. Actions for this customized toolbar items are defined in the <code>OnToolbarClick</code> event.
        </p>
        <p>In this sample, rendered the custom template element Quick Filter along with predefined toolbar items ExpandAll and CollapseAll. While click on the Quick Filter button then the filtering is applied for Task Name column.
        </p>"
    };
}
@*End:Hidden*@

@{
    List<ItemModel> Toolbaritems = new List<ItemModel>();
    Toolbaritems.Add(new  ItemModel() { Text = "Expand all", TooltipText = "Expand all", PrefixIcon = "e-expand" });
    Toolbaritems.Add(new  ItemModel() { Text = "Collapse all", TooltipText = "Collapse all", PrefixIcon = "e-collapse" });
    Toolbaritems.Add(new  ItemModel() { Text = "Quick Filter", TooltipText = "Quick Filter", Id = "toolbarfilter" });
}

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <EjsTreeGrid AllowFiltering="true" @ref="TreeGrid" DataSource="TreeData"  IdMapping="TaskID" ParentIdMapping="ParentID" TreeColumnIndex="1" Toolbar="Toolbaritems" Height="350">
                <TreeGridEvents TValue="string" OnToolbarClick="ToolBarClick"></TreeGridEvents>               
                <TreeGridColumns>
                    <TreeGridColumn Field="TaskID" HeaderText="Task ID" Width="60" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="80"></TreeGridColumn>
                    <TreeGridColumn Field="StartDate" HeaderText=" Start Date" Format="d" Type=ColumnType.Date Width="90" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Duration" HeaderText="Duration" Width="80" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Progress" HeaderText="Progress" Width="80"></TreeGridColumn>
                </TreeGridColumns>
            </EjsTreeGrid>
        </div>
    </div>
</div>

<style>
    .e-expand::before {
        content: '\e82e';
    }

    .e-collapse::before {
        content: '\e834';
    }
</style>


@code{
    EjsTreeGrid<SelfReferenceData> TreeGrid;

    public List<SelfReferenceData> TreeData { get; set; }

    protected override void OnInitialized()
    {
        this.TreeData = SelfReferenceData.GetTree().Take(12).ToList();
    }
    public void ToolBarClick(Syncfusion.EJ2.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Expand all")
        {
            this.TreeGrid.ExpandAll();
            
        }
        if (args.Item.Text == "Collapse all")
        {
            this.TreeGrid.CollapseAll();
           
        }
        if (args.Item.Text == "Quick Filter")
        {
            this.TreeGrid.FilterByColumn("TaskName", "StartsWith", "Child");
        }
    }
}
