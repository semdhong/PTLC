@page "/ColorPicker/Api"

@using Syncfusion.EJ2.Blazor.Inputs

@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.Buttons
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@inherits SampleBaseComponent;

<div class="col-lg-8 control-section">
    <div id="colorpicker-control">
        <h4>Choose a color</h4>
        <EjsColorPicker @ref="colorPicker" @bind-Value="@InputValue" ValueChange="OnChange" Mode="@PickerMode" ModeSwitcher="@ModeChange" ShowButtons="@ShowButtonChange" Disabled="@Disable"></EjsColorPicker>
    </div>
</div>
<div class="col-lg-4 property-section">
    <table id="property" title="Properties" style="width: 100%">
        <tbody>
            <tr>
                <td style="width: 50%">
                    <div>Value</div>
                </td>
                <td style="width: 50%">
                    <div style="max-width: 200px">
                        <EjsTextBox ID="firstname" @bind-Value="@InputValue" ValueChange="TextboxChange"></EjsTextBox>
                    </div>
                </td>
            </tr>
            <tr>
                <td style="width: 50%;padding-top:10px">
                    <div>Mode</div>
                </td>
                <td style="width: 50%;padding-top:10px">
                    <div style="max-width: 200px">
                        <EjsDropDownList DataSource="@Data" PopupHeight="200px" @bind-Value="@Picker" TValue="string" TItem="ColorModeDetails">
                            <DropDownListEvents ValueChange="ValueChanged" TValue="string"></DropDownListEvents>
                            <DropDownListFieldSettings Text="Mode" Value="Id"></DropDownListFieldSettings>
                        </EjsDropDownList>
                    </div>
                </td>
            </tr>
            <tr>
                <td style="width: 50%;padding-top:15px">
                    <div>Show Buttons</div>
                </td>
                <td style="width: 50%;padding-top:15px">
                    <EjsCheckBox @bind-Checked="ShowButtonChange" ValueChange="ButtonOnChange"></EjsCheckBox>
                </td>
            </tr>
            <tr>
                <td style="width: 50%;padding-top:15px">
                    <div>Mode Switcher</div>
                </td>
                <td style="width: 50%;padding-top:15px">
                    <EjsCheckBox @bind-Checked="ModeChange" ValueChange="ModeOnChange"></EjsCheckBox>
                </td>
            </tr>
        </tbody>
    </table>
</div>

@code{

    EjsColorPicker colorPicker;
    public string InputValue = "#0db1e7";
    public string StyleValue = "background-color:#008000";
    public GetCurrentValue ColorValue { get; set; }
    public bool Disable = false;
    public bool ModeChange = true;
    public bool ShowButtonChange = true;
    public string Picker = "Picker";
    ColorPickerMode PickerMode { get; set; }

    private void OnChange(ColorPickerEventArgs args)
    {
        this.ColorValue = ((JObject)args.CurrentValue).ToObject<GetCurrentValue>();
        this.StyleValue = "background-color:" + this.ColorValue.hex;
        this.InputValue = this.ColorValue.hex;
        this.StateHasChanged();
    }

    public class GetCurrentValue
    {
        public string hex { get; set; }
        public string rgba { get; set; }
    }

    public class ColorModeDetails
    {
        public string Id { get; set; }
        public string Mode { get; set; }
    }

    protected override void OnInitialized()
    {
        this.PickerMode = ColorPickerMode.Picker;
    }

    private void TextboxChange(Syncfusion.EJ2.Blazor.Inputs.ChangedEventArgs args)
    {
        if (args.Value != null && args.Value.Length > 2)
        {
            if (!args.Value.StartsWith("#"))
            {
                args.Value = "#" + args.Value;
            }
        }
        else
        {
            args.Value = "#008000";
        }
        this.InputValue = args.Value;
    }

    private void ValueChanged(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        if (args.Value.ToString() == "Palette")
        {
            this.PickerMode = ColorPickerMode.Palette;
        }
        else
        {
            this.PickerMode = ColorPickerMode.Picker;
        }
    }
    private void ModeOnChange(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        this.ModeChange = args.Checked;
    }
    private void ButtonOnChange(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        this.ShowButtonChange = args.Checked;
    }

    public List<ColorModeDetails> Data = new List<ColorModeDetails> {
       new ColorModeDetails { Id = "Picker", Mode = "Picker" },
       new ColorModeDetails { Id = "Palette", Mode = "Palette" }
           };


}
<style>

    .property-panel-content {
        padding: 0 10px 10px 0;
        overflow: auto;
    }

    #colorpicker-control {
        margin: 30px auto;
        padding-top: 50px;
        text-align: center;
    }

        #colorpicker-control h4 {
            margin-bottom: 20px;
        }

    .e-bigger #colorpicker-control h4 {
        font-size: 20px;
    }
</style>

