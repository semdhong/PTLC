@page "/Grid/ObservableBinding"

@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.Buttons
@using System.Collections.ObjectModel;
@using System.ComponentModel;
@using ej2_blazor_samples
@using ej2_blazor_griddata
@inherits SampleBaseComponent;


<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <EjsButton ID="add" @onclick="AddRecord">Add Data</EjsButton>
            <EjsButton ID="del" @onclick="DeleteRecord">Delete Data</EjsButton>
            <EjsButton ID="update" @onclick="UpdateRecord">Update Data</EjsButton>

            <EjsGrid DataSource="@ObservableData" AllowPaging="true">
                <GridColumns>
                    <GridColumn Field=@nameof(ObservableDatas.OrderID) HeaderText="Order ID" IsPrimaryKey="true" TextAlign="@TextAlign.Center" HeaderTextAlign="@TextAlign.Center" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(ObservableDatas.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(ObservableDatas.Freight) HeaderText="Freight" EditType="EditType.NumericEdit" Format="C2" Width="140" TextAlign="@TextAlign.Right" HeaderTextAlign="@TextAlign.Right"></GridColumn>
                    <GridColumn Field=@nameof(ObservableDatas.OrderDate) HeaderText="Order Date" EditType="EditType.DatePickerEdit" Format="d" TextAlign="TextAlign.Right" Type="ColumnType.Date" Width="160"></GridColumn>
                </GridColumns>
            </EjsGrid>
        </div>
    </div>
</div>

@code{

    public ObservableCollection<ObservableDatas> ObservableData { get; set; }

    List<ObservableDatas> Orders = new List<ObservableDatas>();

    private int uniqueid { get; set; }

    protected override void OnInitialized()
    {

           Orders = Enumerable.Range(1, 10).Select(x => new ObservableDatas()
           {
                OrderID = 10000 + x,
                CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
                Freight = 2.1 * x,
                OrderDate = DateTime.Now.AddDays(-x),
           }).ToList();
           ObservableData  = new ObservableCollection<ObservableDatas>(Orders);
    }

    public void AddRecord()
    {
        ObservableData.Add(new ObservableDatas() { OrderID = 10010 + ++uniqueid, CustomerID = "VINET", Freight = 30.35, OrderDate = new DateTime(1991, 05, 15) });
    }

    public void DeleteRecord()
    {
        if (ObservableData.Count() != 0)
        {
            ObservableData.Remove(ObservableData.First());
        }
    }

    public void UpdateRecord()
    {
        if (ObservableData.Count() != 0)
        {
            var name = ObservableData.First();
            name.CustomerID = "Record Updated";
        }
    }

    public class ObservableDatas : INotifyPropertyChanged
    {
        public int OrderID { get; set; }
        private string customerID { get; set; }
        public string CustomerID
        {
            get { return customerID; }
            set
            {
                this.customerID = value;
                NotifyPropertyChanged("CustomerID");
            }
        }


        public DateTime OrderDate { get; set; }
        public double Freight { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}

