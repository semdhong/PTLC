@page "/PivotTable/CalculatedField"

@using Syncfusion.EJ2.Blazor.PivotView
@using Syncfusion.EJ2.Blazor.Buttons

@*Hidden:Lines*@
@using ej2_blazor_samples
@using ej2_blazor_productdetails
@{
    SampleBrowser.CurrentSampleName = "Calculated Field";
    SampleBrowser.CurrentControlName = "PivotTable";
    SampleBrowser.CurrentControlCategory = "PivotTable";
    SampleBrowser.CurrentControl = SampleBrowser.Config.PivotTable;
    SampleBrowser.TitleTag = "PivotTable . Calculated Field . Syncfusion Blazor Components - Preview";
    SampleBrowser.MetaDescription = "This demo for Blazor Pivot Table component shows calculated field, and it allows users to add calculated items.";
    SampleBrowser.ActionDescription = new string[] {
@"<p>In this sample, <b>Total Amount</b> acts as the calculated field. Users can insert a new basic arithmetic
        expression
        based on the existing measure items either through a dialog at runtime or through code behind.</p>"
};
    SampleBrowser.Description = new string[] {
@"<p>The calculated field feature allows users to create custom fields which are not present in the actual data source. Users
        can
        create these fields using basic mathematical expression collaborating with existing fields. Calculated fields
        can
        be created through UI dialog as well as code behind and it can be enabled by setting
        <code>AllowCalculatedField</code> in <code>EjsPivotView</code> to <b>true</b>. Use the
        <code>PivotViewCalculatedFieldSetting</code> property to configure the calculated field in code behind along with the following properties.
        <br>
    </p>
    <table>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;'>
                <code>Name :</code>
            </td>
            <td>Specifies the given calculated field with unique name..</td>
        </tr>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;'>
                <code>Formula :</code>
            </td>
            <td>Specifies to set the formula based on the given data source.</td>
        </tr>
    </table>
    "
};
}
@*End:Hidden*@

<div class="control-section">
    <div class="content-wrapper">
        <div class="column-8">
            <EjsPivotView @ref="pivot" TValue="PivotProductDetails" ShowFieldList=true AllowCalculatedField=true>
                <PivotViewDataSourceSettings DataSource="@data" ExpandAll=false EnableSorting=true>
                    <PivotViewColumns>
                        <PivotViewColumn Name="Year"></PivotViewColumn>
                        <PivotViewColumn Name="Quarter"></PivotViewColumn>
                    </PivotViewColumns>
                    <PivotViewRows>
                        <PivotViewRow Name="Country"></PivotViewRow>
                        <PivotViewRow Name="Products"></PivotViewRow>
                    </PivotViewRows>
                    <PivotViewValues>
                        <PivotViewValue Name="Sold" Caption="Units Sold"></PivotViewValue>
                        <PivotViewValue Name="Amount" Caption="Sold Amount"></PivotViewValue>
                        <PivotViewValue Name="Total" Caption="Total Amount" Type=SummaryTypes.CalculatedField></PivotViewValue>
                    </PivotViewValues>
                    <PivotViewFilters>
                        <PivotViewFilter Name="Product_Categories" Caption="Product Categories"></PivotViewFilter>
                    </PivotViewFilters>
                    <PivotViewFormatSettings>
                        <PivotViewFormatSetting Name="Amount" Format="C" UseGrouping=true></PivotViewFormatSetting>
                        <PivotViewFormatSetting Name="Sold" Format="N" UseGrouping=true></PivotViewFormatSetting>
                    </PivotViewFormatSettings>
                    <PivotViewCalculatedFieldSettings>
                        <PivotViewCalculatedFieldSetting Name="Total" Formula="@totalPrice">
                        </PivotViewCalculatedFieldSetting>
                    </PivotViewCalculatedFieldSettings>
                </PivotViewDataSourceSettings>
                <PivotViewGridSettings ColumnWidth="140"></PivotViewGridSettings>
            </EjsPivotView>
        </div>
        <div class="column-4">
            <div style="height:300px; overflow:auto;">
                <h5>Properties:</h5> <br>
                <EjsButton ID="calculated" IsPrimary="true" OnClick="calculated">CALCULATED FIELD</EjsButton>
            </div>

        </div>
    </div>
</div>

<style>
    .e-pivotview {
        min-height: 200px;
    }
    .column-8{
        width: 75% !important;
        float: left !important;
    }
    .column-4{
        width: 22% !important;
        float: right !important;
    }
</style>

@code{
    EjsPivotView<PivotProductDetails> pivot;
    public String totalPrice = "\"" + "Sum(Amount)" + "\"" + "+" + "\"" + "Sum(Sold)" + "\"";

    public List<PivotProductDetails> data { get; set; }

    protected override void OnInitialized()
    {
        this.data = PivotProductDetails.GetProductData();
    }
    public void calculated(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        this.pivot.CreateCalculatedFieldDialog();
    }
}