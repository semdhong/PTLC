// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace PTLC.Data
{
    public partial class EasyDbContext : DbContext
    {
        public EasyDbContext()
        {
        }

        public EasyDbContext(DbContextOptions<EasyDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BusinessClass> BusinessClasses { get; set; }
        public virtual DbSet<DeliveryAddition> DeliveryAdditions { get; set; }
        public virtual DbSet<DeliveryItem> DeliveryItems { get; set; }
        public virtual DbSet<DeliveryMaster> DeliveryMasters { get; set; }
        public virtual DbSet<DeliveryStatus> DeliveryStatuses { get; set; }
        public virtual DbSet<DeviceCode> DeviceCodes { get; set; }
        public virtual DbSet<InspectionNote> InspectionNotes { get; set; }
        public virtual DbSet<Merchant> Merchants { get; set; }
        public virtual DbSet<PersistedGrant> PersistedGrants { get; set; }
        public virtual DbSet<RateMatrix> RateMatrices { get; set; }
        public virtual DbSet<Rider> Riders { get; set; }
        public virtual DbSet<SalesAgent> SalesAgents { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<VehicleType> VehicleTypes { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=pltc;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DeliveryItem>(entity =>
            {
                entity.HasOne(d => d.DeliveryMaster)
                    .WithMany(p => p.DeliveryItems)
                    .HasForeignKey(d => d.DeliveryMasterId)
                    .HasConstraintName("FK_DeliveryItems_DeliveryMaster");

                entity.HasOne(d => d.DeliveryStatusNavigation)
                    .WithMany(p => p.DeliveryItems)
                    .HasForeignKey(d => d.DeliveryStatus)
                    .HasConstraintName("FK_DeliveryItems_DeliveryStatus");
            });

            modelBuilder.Entity<DeliveryMaster>(entity =>
            {
                entity.HasOne(d => d.Merchant)
                    .WithMany(p => p.DeliveryMasters)
                    .HasForeignKey(d => d.MerchantId)
                    .HasConstraintName("FK_DeliveryMaster_Merchant");

                entity.HasOne(d => d.Rider)
                    .WithMany(p => p.DeliveryMasters)
                    .HasForeignKey(d => d.RiderId)
                    .HasConstraintName("FK_DeliveryMaster_Rider");
            });

            modelBuilder.Entity<DeviceCode>(entity =>
            {
                entity.HasIndex(e => e.DeviceCode1)
                    .IsUnique();

                entity.HasIndex(e => e.Expiration);
            });

            modelBuilder.Entity<InspectionNote>(entity =>
            {
                entity.HasIndex(e => e.VehicleLicenseNumber);
            });

            modelBuilder.Entity<Merchant>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Status).IsFixedLength();

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.Merchants)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("FK_Merchant_SalesAgent");
            });

            modelBuilder.Entity<PersistedGrant>(entity =>
            {
                entity.HasIndex(e => e.Expiration);

                entity.HasIndex(e => new { e.SubjectId, e.ClientId, e.Type });
            });

            modelBuilder.Entity<RateMatrix>(entity =>
            {
                entity.HasKey(e => e.VehicleTypeId)
                    .HasName("PK_RateMatrix_1");

                entity.Property(e => e.VehicleTypeId).ValueGeneratedNever();

                entity.HasOne(d => d.VehicleType)
                    .WithOne(p => p.RateMatrix)
                    .HasForeignKey<RateMatrix>(d => d.VehicleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RateMatrix_VehicleType");
            });

            modelBuilder.Entity<Rider>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Gender).IsFixedLength();
            });

            modelBuilder.Entity<SalesAgent>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Gender).IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}